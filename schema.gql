# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Category {
  id: Int!
  name: String!
  slug: String!
  isActive: Boolean!
  parentId: Int
  children: [Category!]
  parent: Category
}

type CategoryResponse {
  success: Boolean!
  message: String
  data: Category
}

type CategoryListResponse {
  success: Boolean!
  message: String
  data: [Category!]
}

type Product {
  id: Int!
  title: String!
  description: String!
  markedPrice: Float!
  displayPrice: Float!
  discountPercentage: Float!
  category: String
  imageUrl: String
  sellerId: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Coupon {
  id: Int!
  code: String!
  discountValue: Float!
  discountType: String!
  expirationDate: DateTime
  minPurchaseAmount: Float
  maxUsage: Int
  perCustomerLimit: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Cart {
  id: Int!
  userId: String!
  products: [CartProduct!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CartProduct {
  id: Int!
  cartId: Int!
  productId: Int!
  quantity: Int!
}

type User {
  id: Int!
  username: String!
  password: String!
}

type OrderProduct {
  id: Int!
  orderId: Int!
  productId: Int!
  quantity: Int!
  price: Float!
  sellerOrderId: Int
}

type ReturnRequest {
  id: Int!
  orderId: Int!
  reason: String!
  status: String!
  returnRequestReason: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CancelRequest {
  id: Int!
  orderId: Int!
  reason: String!
  status: String!
  cancelRequestReason: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SellerOrder {
  id: Int!
  orderId: Int!
  sellerId: String!
  status: String!
  sellerNote: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Order {
  id: Int!
  user: User!
  products: [OrderProduct!]!
  SellerOrder: [SellerOrder!]!
  totalPrice: Float!
  shippingCharges: Float!
  orderStatus: String!
  paymentStatus: String!
  createdAt: DateTime!
  paymentTime: DateTime!
  updatedAt: DateTime!
  returnRequests: [ReturnRequest!]
  cancelRequests: [CancelRequest!]
}

type Address {
  addressLine1: String
  city: String
  state: String
  postalCode: String
  country: String
}

type CustomerSummary {
  customerId: String!
  email: String!
  number: String!
  name: String!
  orderCount: Int!
  totalSpend: Float
  lastOrderDate: String
  address: Address
  tag: CustomerTag!
  memberSince: String!
}

"""Customer classification based on order behavior"""
enum CustomerTag {
  HIGH_SPENDER
  FREQUENT
  NEW
  ONE_TIME
}

type Brand {
  id: Int!
  name: String!
  slug: String!
  logoUrl: String
  categories: [Category]!
  products: [Product]!
}

type BrandCategory {
  brandId: Int!
  categoryId: Int!
  featured: Boolean!
  displayOrder: Int!
  brand: Brand!
  category: Category!
}

type Query {
  categories(offset: Int, limit: Int, showActive: Boolean): CategoryListResponse!
  category(id: Int!): CategoryResponse!
  categoryBySlug(slug: String!): CategoryResponse!
  subcategories(parentId: Int!): CategoryListResponse!
  totalCategories(showActive: Boolean): Int!
  products(filter: FilterProductsInput): [Product!]!
  product(id: Int!): Product!
  coupons: [Coupon!]!
  coupon(id: String!): Coupon!
  cart(userId: String!): Cart!
  orders: [Order!]!
  order(id: Int!): Order!
  customersBySeller(sellerId: String!, search: String, limit: Int, offset: Int, sortBy: String, sortOrder: String, tag: CustomerTag): [CustomerSummary!]!
  brands(categorySlug: String, featured: Boolean): [Brand!]!
  brand(slug: String!): Brand
  brandCategories: [BrandCategory!]!
}

input FilterProductsInput {
  searchString: String
  priceMin: Float
  priceMax: Float
  productStatus: ProductStatus
  pageSize: Int = 10
  pageOffset: Int = 0
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  OUTOFSTOCK
  DRAFT
}

type Mutation {
  createCategory(input: CreateCategoryInput!): CategoryResponse!
  updateCategory(id: Int!, input: UpdateCategoryInput!): CategoryResponse!
  createCoupon(code: String!, discountValue: Float!, discountType: String!, validFrom: DateTime!, validTo: DateTime!, userId: String!): Coupon!
  updateCoupon(id: String!, updateData: UpdateCouponInput!): Coupon!
  deleteCoupon(id: String!): Boolean!
  addToCart(userId: String!, productId: Int!, quantity: Int!): Cart!
  createOrder(user: UserInput!, seller: SellerInput!, products: [OrderProductInput!]!, totalPrice: Float!): Order!
  createBrand(input: CreateBrandInput!): Brand!
  updateBrand(id: Int!, input: UpdateBrandInput!): Brand!
  deactivateBrand(id: Int!): Brand!
  activateBrand(id: Int!): Brand!
  deleteBrand(id: Int!): Boolean!
  addBrandToCategory(input: AddBrandToCategoryInput!): BrandCategory!
  updateBrandCategory(input: UpdateBrandCategoryInput!): BrandCategory!
  removeBrandFromCategory(brandId: Int!, categoryId: Int!): Boolean!
}

input CreateCategoryInput {
  name: String!
  slug: String!
  isActive: Boolean! = true
  parentId: Int
}

input UpdateCategoryInput {
  name: String
  slug: String
  isActive: Boolean
  parentId: Int
}

input UpdateCouponInput {
  code: String
  discountValue: Float
  discountType: String
  validFrom: DateTime
  validTo: DateTime
  minPurchaseAmount: Float
  maxUsage: Int
  perCustomerLimit: Int
}

input UserInput {
  id: String!
  email: String!
}

input SellerInput {
  id: String!
}

input OrderProductInput {
  productId: Int!
  quantity: Int!
  price: Float!
}

input CreateBrandInput {
  name: String!
  slug: String!
  logoUrl: String
  categoryIds: [Int!]
}

input UpdateBrandInput {
  name: String
  slug: String
  logoUrl: String
  categoryIds: [Int!]
}

input AddBrandToCategoryInput {
  brandId: Int!
  categoryId: Int!
  featured: Boolean! = false
  displayOrder: Int! = 0
}

input UpdateBrandCategoryInput {
  brandId: Int!
  categoryId: Int!
  featured: Boolean
  displayOrder: Int
}