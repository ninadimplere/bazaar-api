generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountType {
  INDIVIDUAL
  COMPANY
}

enum VerificationMethod {
  INSTANT
  MANUAL
}

enum UserApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Role {
  BUYER
  SELLER
  ADMIN
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
  REFUNDED
  COMPLETED
  FAILED
  PROCESSING
  REJECTED
}

model User {
  id           String        @id @default(cuid())
  email        String?       @unique
  password     String?
  role         Role[]        @default([])
  isActive     Boolean?      @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  reviews      Review[]
  seller       Seller?
  addresses    Address[]
  bankAccounts BankAccount[]
  Order        Order[]
}

model BankAccount {
  id            Int      @id @default(autoincrement())
  accountNumber String
  ifscCode      String
  bankVerified  Boolean  @default(false)
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Address {
  id           Int      @id @default(autoincrement())
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  postalCode   String
  country      String
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Seller {
  id                 Int                 @id @default(autoincrement())
  userId             String              @unique
  user               User                @relation(fields: [userId], references: [id])
  email              String?             @unique
  fullName           String?
  phoneNumber        String?
  accountType        AccountType?
  status             UserApprovalStatus  @default(PENDING)
  statusRemark       String?
  profileImageUrl    String?
  panNumber          String?
  aadhaarNumber      String?
  gstNumber          String?
  cinNumber          String?
  panDocumentUrl     String?
  aadhaarDocumentUrl String?
  gstCertificateUrl  String?
  cinDocumentUrl     String?
  verificationMethod VerificationMethod?
  verifiedAt         DateTime?
  createdAt          DateTime            @default(now())
  approvedBy         String?
  updatedAt          DateTime            @updatedAt
}

model Category {
  id        Int        @id @default(autoincrement())
  name      String
  parentId  Int?
  parent    Category?  @relation("CategoryToSubcategory", fields: [parentId], references: [id])
  children  Category[] @relation("CategoryToSubcategory")
  slug      String     @unique
  isActive  Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Product   Product[]
}

model Product {
  id                 Int            @id @default(autoincrement())
  title              String
  description        String?
  markedPrice        Float
  displayPrice       Float
  discountPercentage Float?
  displayPriority    Int?
  categoryId         Int?
  category           Category?      @relation(fields: [categoryId], references: [id])
  imageUrl           String?
  sellerId           Int
  isActive           Boolean        @default(true)
  slug               String         @unique
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  reviews            Review[]
  cartProducts       CartProduct[] // Relation to CartProduct
  orderProducts      OrderProduct[] // Relation to OrderProduct
}

model Review {
  id        Int      @id @default(autoincrement())
  productId Int
  userId    String
  rating    Int      @default(0)
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Cart {
  id        Int           @id @default(autoincrement())
  userId    String
  products  CartProduct[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model CartProduct {
  id        Int     @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int     @default(1)
  cart      Cart    @relation(fields: [cartId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Order {
  id        Int            @id @default(autoincrement())
  userId    String
  user      User           @relation(fields: [userId], references: [id])
  products  OrderProduct[]
  status    OrderStatus    @default(PENDING)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model OrderProduct {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int     @default(1)
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}
