generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountType {
  INDIVIDUAL
  COMPANY
}

enum VerificationMethod {
  INSTANT
  MANUAL
}

enum UserApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Role {
  BUYER
  SELLER
  ADMIN
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
  REFUNDED
  COMPLETED
  FAILED
  PROCESSING
  REJECTED
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  OUTOFSTOCK
  DRAFT
}

enum PaymentStatus {
  PAID
  PENDING
  FAILED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum SpenderType {
  NEW
  ONE_TIME
  FREQUENT
  HIGH_SPENDER
}

model User {
  id           String      @id @default(cuid())
  email        String?     @unique
  password     String?
  status       String?     @default("active")
  statusRemark String?
  role         String[]    @default([])
  isActive     Boolean?    @default(true)
  spenderType  SpenderType @default(NEW)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  reviews      Review[]
  coupons      Coupon[] // Relation to Coupon (created by the user)
  bankAccounts BankAccount[] // Relation to BankAccount
  addresses    Address[] // Relation to Address
  seller       Seller? // Relation to Seller
  orders       Order[] // Relation to Order
  UserProfile  UserProfile?
}

model BankAccount {
  id            Int      @id @default(autoincrement())
  accountNumber String
  ifscCode      String
  bankVerified  Boolean  @default(false)
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([accountNumber, userId])
}

model Address {
  id           Int      @id @default(autoincrement())
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  postalCode   String
  country      String
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([userId, addressLine1, addressLine2, city, state, postalCode, country])
}

model Seller {
  id                 Int                 @id @default(autoincrement())
  userId             String              @unique
  user               User                @relation(fields: [userId], references: [id])
  email              String?             @unique
  fullName           String?
  phoneNumber        String?
  accountType        AccountType?
  status             UserApprovalStatus  @default(PENDING)
  statusRemark       String?
  profileImageUrl    String?
  panNumber          String?
  aadhaarNumber      String?
  gstNumber          String?
  cinNumber          String?
  panDocumentUrl     String?
  aadhaarDocumentUrl String?
  gstCertificateUrl  String?
  cinDocumentUrl     String?
  verificationMethod VerificationMethod?
  verifiedAt         DateTime?
  createdAt          DateTime            @default(now())
  approvedBy         String?
  updatedAt          DateTime            @updatedAt
  SellerOrder        SellerOrder[]
  Product            Product[]
}

model Category {
  id            Int             @id @default(autoincrement())
  name          String
  parentId      Int?
  parent        Category?       @relation("CategoryToSubcategory", fields: [parentId], references: [id])
  children      Category[]      @relation("CategoryToSubcategory")
  slug          String          @unique
  isActive      Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Product       Product[]
  BrandCategory BrandCategory[]
  coupons       Coupon[]        @relation("CategoryCoupons")
}

model Brand {
  id              Int             @id @default(autoincrement())
  name            String
  slug            String          @unique
  logoUrl         String?
  isActive        Boolean         @default(true)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  brandCategories BrandCategory[]
  products        Product[]
}

model BrandCategory {
  brandId      Int
  categoryId   Int
  featured     Boolean  @default(false)
  displayOrder Int?
  tag          String?
  addedBy      String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  brand    Brand    @relation(fields: [brandId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@id([brandId, categoryId])
}

model Product {
  id                 Int            @id @default(autoincrement())
  title              String
  description        String
  markedPrice        Float
  displayPrice       Float
  discountPercentage Float          @default(0)
  displayPriority    Int?
  categoryId         Int?
  availableQuantity  Int?
  category           Category?      @relation(fields: [categoryId], references: [id])
  imageUrl           String?
  productStatus      ProductStatus  @default(DRAFT)
  brandId            Int?
  brandName          Brand?         @relation(fields: [brandId], references: [id])
  sellerId           String
  seller             Seller         @relation(fields: [sellerId], references: [userId])
  slug               String         @unique
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  reviews            Review[]
  cartProducts       CartProduct[] // Relation to CartProduct
  coupons            Coupon[]       @relation("ProductCoupons")
  orderProducts      OrderProduct[] // Relation to OrderProduct
}

model Review {
  id        Int      @id @default(autoincrement())
  productId Int
  userId    String
  rating    Int      @default(0)
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Cart {
  id        Int           @id @default(autoincrement())
  userId    String
  products  CartProduct[]
  couponId  Int? // Foreign key to Coupon
  coupon    Coupon?       @relation(fields: [couponId], references: [id])
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model CartProduct {
  id        Int     @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int     @default(1)
  cart      Cart    @relation(fields: [cartId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Order {
  id              Int             @id @default(autoincrement())
  userId          String
  user            User            @relation(fields: [userId], references: [id])
  products        OrderProduct[] // Relation to OrderProduct
  totalPrice      Float           @default(0) // Total price of the order
  shippingCharges Float           @default(0)
  orderStatus     OrderStatus     @default(PENDING)
  paymentStatus   PaymentStatus   @default(PENDING)
  createdAt       DateTime        @default(now())
  paymentTime     DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  coupons         Coupon[] // Relation to Coupon
  returnRequests  ReturnRequest[] // Relation to ReturnRequest
  cancelRequests  CancelRequest[] // Relation to CancelRequest
  SellerOrder     SellerOrder[]

  @@index([id])
}

model OrderProduct {
  id            Int          @id @default(autoincrement())
  orderId       Int
  order         Order        @relation(fields: [orderId], references: [id])
  productId     Int
  product       Product      @relation(fields: [productId], references: [id])
  quantity      Int          @default(1)
  price         Float        @default(0) // Price of the product in the order
  SellerOrder   SellerOrder? @relation(fields: [sellerOrderId], references: [id])
  sellerOrderId Int?
}

model Coupon {
  id                 Int       @id @default(autoincrement())
  code               String    @unique
  title              String? // Title for the promotion
  description        String? // Description of the coupon or promotion
  discountType       String // 'PERCENTAGE' or 'FIXED'
  discountValue      Float
  validFrom          DateTime
  validTo            DateTime
  minPurchaseAmount  Float?
  maxUsage           Int?
  usageCount         Int       @default(0) // Track how many times this coupon has been used
  perCustomerLimit   Int?
  isActive           Boolean   @default(true) // Whether this coupon is currently active
  applicableProducts Product[] @relation("ProductCoupons") // Relation to multiple products
  applicableCategories Category[] @relation("CategoryCoupons") // Relation to categories
  createdBy          String // Seller ID
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  imageUrl           String? // Image for promotion display
  promotionType      String?  @default("COUPON") // COUPON, SALE, SPECIAL_OFFER, etc.
  targetAudience     String?  // NEW_CUSTOMERS, RETURNING_CUSTOMERS, ALL, etc.

  carts  Cart[] // Relation to Cart
  orders Order[] // Relation to Order
  user   User    @relation(fields: [createdBy], references: [id])
}

model ReturnRequest {
  id                  Int      @id @default(autoincrement())
  orderId             Int
  order               Order    @relation(fields: [orderId], references: [id])
  reason              String
  status              String   @default("PENDING") // PENDING, APPROVED, REJECTED
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  returnRequestReason String
}

model CancelRequest {
  id                  Int      @id @default(autoincrement())
  orderId             Int
  order               Order    @relation(fields: [orderId], references: [id])
  reason              String
  status              String   @default("PENDING") // PENDING, APPROVED, REJECTED
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  cancelRequestReason String
}

model SellerOrder {
  id        Int         @id @default(autoincrement())
  orderId   Int
  sellerId  String
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  order      Order          @relation(fields: [orderId], references: [id])
  seller     Seller         @relation(fields: [sellerId], references: [userId])
  products   OrderProduct[]
  sellerNote String
}

model UserProfile {
  id           Int       @id @default(autoincrement())
  userId       String    @unique
  user         User      @relation(fields: [userId], references: [id])
  fullName     String?
  phoneNumber  String?
  dateOfBirth  DateTime?
  gender       Gender?
  profileImage String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}
