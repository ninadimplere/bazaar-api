generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

////////////////////////
//  User & Authentication
////////////////////////

model User {
  id                   Int                   @id @default(autoincrement())
  email                String                @unique
  password             String
  phone                String?               @unique
  role                 Role                  @relation(fields: [roleId], references: [id])
  roleId               Int
  addresses            UserAddress[]
  paymentMethods       UserPaymentMethod[]
  bankAccounts         UserBankAccount[]
  verifications        UserVerification[]
  oauthAccounts        OAuthAccount[]
  referralsSent        Referral[]            @relation("ReferralInviter")
  referralsReceived    Referral[]            @relation("ReferralInvitee")
  carts                Cart[]
  orders               Order[]
  messagesSent         Message[]             @relation("MessageSender")
  notifications        Notification[]
  favoritesLikes       FavoritesLike[]
  favoritesSavedSearch FavoritesSavedSearch[]
  searchHistories      UserSearchHistory[]
  recentlyViewed       RecentlyViewed[]
  reviews              ProductReview[]
  transactions         Transaction[]
  withdrawalRequests   WithdrawalRequest[]
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt

  Listing Listing[]

  MessageThread MessageThread[] @relation("ThreadBuyer")

  MessageThreadSeller MessageThread[] @relation("ThreadSeller")

  Offer Offer[]

  SellerRating SellerRating[]

  AccountBalance AccountBalance[]

  AdminUser AdminUser[]
}

model Role {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  users User[]
}

model UserVerification {
  id        Int                   @id @default(autoincrement())
  user      User                  @relation(fields: [userId], references: [id])
  userId    Int
  type      VerificationType
  status    VerificationStatus
  otp       String?
  expiresAt DateTime?
  createdAt DateTime              @default(now())
}

enum VerificationType {
  EMAIL
  PHONE
  GOVID
}

enum VerificationStatus {
  PENDING
  VERIFIED
  EXPIRED
}

model OAuthAccount {
  id                 Int      @id @default(autoincrement())
  user               User     @relation(fields: [userId], references: [id])
  userId             Int
  provider           String
  providerAccountId  String
  accessToken        String?
  refreshToken       String?
  createdAt          DateTime @default(now())
}

model UserAddress {
  id             Int      @id @default(autoincrement())
  user           User     @relation(fields: [userId], references: [id])
  userId         Int
  label          String?
  addressLine1   String
  addressLine2   String?
  city           String
  state          String
  postalCode     String
  country        String
  latitude       Float?
  longitude      Float?
  isDefaultShip  Boolean  @default(false)
  isDefaultBill  Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  OrderBilling Order[] @relation("BillingAddress")

  OrderShipping Order[] @relation("ShippingAddress")
}

model UserPaymentMethod {
  id          Int                @id @default(autoincrement())
  user        User               @relation(fields: [userId], references: [id])
  userId      Int
  type        PaymentMethodType
  provider    String
  token       String
  last4       String
  expiryMonth Int
  expiryYear  Int
  createdAt   DateTime           @default(now())
}

enum PaymentMethodType {
  CARD
  CASHFREE
  OTHER
}

model UserBankAccount {
  id                Int      @id @default(autoincrement())
  user              User     @relation(fields: [userId], references: [id])
  userId            Int
  bankName          String
  accountHolderName String
  accountNumber     String
  ifscCode          String
  createdAt         DateTime @default(now())

  WithdrawalRequest WithdrawalRequest[]
}

model Referral {
  id          Int             @id @default(autoincrement())
  code        String          @unique
  inviter     User            @relation("ReferralInviter", fields: [inviterId], references: [id])
  inviterId   Int
  invitee     User            @relation("ReferralInvitee", fields: [inviteeId], references: [id])
  inviteeId   Int
  credit      Float
  status      ReferralStatus
  createdAt   DateTime        @default(now())
}

enum ReferralStatus {
  PENDING
  COMPLETED
  EXPIRED
}

////////////////////////
//     Catalog
////////////////////////

model Category {
  id            Int           @id @default(autoincrement())
  name          String        @unique
  slug          String        @unique
  subCategories SubCategory[]
  createdAt     DateTime      @default(now())
}

model SubCategory {
  id          Int       @id @default(autoincrement())
  name        String
  slug        String    @unique
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  Int
  createdAt   DateTime  @default(now())
}

model Brand {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  slug      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
}

model Product {
  id          Int                @id @default(autoincrement())
  title       String
  description String?
  brand       Brand              @relation(fields: [brandId], references: [id])
  brandId     Int
  type        String?
  materials   String?
  images      ProductImage[]
  attributes  ProductAttribute[]
  tags        ProductTag[]
  listings    Listing[]
  reviews     ProductReview[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  FavoritesLike FavoritesLike[]
}

model ProductImage {
  id         Int      @id @default(autoincrement())
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  url        String
  position   Int      @default(0)
}

model ProductAttribute {
  id         Int      @id @default(autoincrement())
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  key        String
  value      String
}

model ProductTag {
  id         Int      @id @default(autoincrement())
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  tag        String
}

////////////////////////
//      Listing
////////////////////////

model Listing {
  id             Int                  @id @default(autoincrement())
  product        Product              @relation(fields: [productId], references: [id])
  productId      Int
  seller         User                 @relation(fields: [sellerId], references: [id])
  sellerId       Int
  price          Float
  fee            Float
  shippingMode   ShippingMode
  commission     Float?
  promotions     ListingPromotion[]
  messageThreads MessageThread[]
  cartItems      CartItem[]
  orderItems     OrderItem[]
  offers         Offer[]
  recentlyViewed RecentlyViewed[]
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
}

enum ShippingMode {
  LOCAL_PICKUP
  LOCAL_DELIVERY
  PLATFORM_SHIPPING
  CUSTOM_DELIVERY
  NATIONWIDE_SHIPPING
}

model ListingPromotion {
  id             Int           @id @default(autoincrement())
  listing        Listing       @relation(fields: [listingId], references: [id])
  listingId      Int
  type           PromotionType
  startDate      DateTime
  endDate        DateTime
  discountPercent Float?
  reducedPrice   Float?
  createdAt      DateTime      @default(now())
}

enum PromotionType {
  OFFER_TO_LIKERS
  PROMOTE
}

////////////////////////
//  Search & Discovery
////////////////////////

model SearchKeyword {
  id           Int                  @id @default(autoincrement())
  keyword      String               @unique
  histories    UserSearchHistory[]
  popularities SearchPopularity[]
}

model UserSearchHistory {
  id         Int           @id @default(autoincrement())
  user       User          @relation(fields: [userId], references: [id])
  userId     Int
  keyword    SearchKeyword @relation(fields: [keywordId], references: [id])
  keywordId  Int
  searchedAt DateTime      @default(now())
}

model SearchPopularity {
  id         Int           @id @default(autoincrement())
  keyword    SearchKeyword @relation(fields: [keywordId], references: [id])
  keywordId  Int
  count      Int           @default(0)
  updatedAt  DateTime      @updatedAt
}

////////////////////////
//  Cart & Checkout
////////////////////////

model Cart {
  id         Int        @id @default(autoincrement())
  user       User?      @relation(fields: [userId], references: [id])
  userId     Int?
  sessionId  String?    @unique
  items      CartItem[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model CartItem {
  id            Int      @id @default(autoincrement())
  cart          Cart     @relation(fields: [cartId], references: [id])
  cartId        Int
  listing       Listing  @relation(fields: [listingId], references: [id])
  listingId     Int
  quantity      Int      @default(1)
  priceSnapshot Float
  feeSnapshot   Float
  addedAt       DateTime @default(now())
}

////////////////////////
//   Orders & Payments
////////////////////////

model Order {
  id                   Int           @id @default(autoincrement())
  user                 User          @relation(fields: [userId], references: [id])
  userId               Int
  totalAmount          Float
  status               OrderStatus   @relation(fields: [statusId], references: [id])
  statusId             Int
  billingAddress       UserAddress   @relation("BillingAddress", fields: [billingAddressId], references: [id])
  billingAddressId     Int
  shippingAddress      UserAddress   @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  shippingAddressId    Int
  coupon               Coupon?       @relation(fields: [couponId], references: [id])
  couponId             Int?
  creditUsed           Float         @default(0)
  items                OrderItem[]
  transactions         Transaction[]
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
}

model OrderItem {
  id           Int      @id @default(autoincrement())
  order        Order    @relation(fields: [orderId], references: [id])
  orderId      Int
  listing      Listing  @relation(fields: [listingId], references: [id])
  listingId    Int
  productTitle String
  quantity     Int
  price        Float
  fee          Float
  createdAt    DateTime @default(now())

  ProductReview ProductReview[]
}

model OrderStatus {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  orders Order[]
}

model Coupon {
  id            Int           @id @default(autoincrement())
  code          String        @unique
  discountType  DiscountType
  amount        Float?
  percent       Float?
  minOrderValue Float?
  startDate     DateTime?
  endDate       DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  Order Order[]
}

enum DiscountType {
  FLAT
  PERCENTAGE
}

model ShippingMethod {
  id          Int             @id @default(autoincrement())
  name        String
  description String?
  rates       ShippingRate[]
}

model ShippingRate {
  id               Int            @id @default(autoincrement())
  shippingMethod   ShippingMethod @relation(fields: [shippingMethodId], references: [id])
  shippingMethodId Int
  rateType         RateType
  valueFrom        Float
  valueTo          Float?
  price            Float
}

enum RateType {
  WEIGHT
  DISTANCE
  PINCODE
}

////////////////////////
//  Messaging & Offers
////////////////////////

model MessageThread {
  id         Int            @id @default(autoincrement())
  buyer      User           @relation("ThreadBuyer", fields: [buyerId], references: [id])
  buyerId    Int
  seller     User           @relation("ThreadSeller", fields: [sellerId], references: [id])
  sellerId   Int
  listing    Listing        @relation(fields: [listingId], references: [id])
  listingId  Int
  messages   Message[]
  offers     Offer[]
  createdAt  DateTime       @default(now())
}

model Message {
  id         Int           @id @default(autoincrement())
  thread     MessageThread @relation(fields: [threadId], references: [id])
  threadId   Int
  sender     User          @relation("MessageSender", fields: [senderId], references: [id])
  senderId   Int
  content    String
  createdAt  DateTime      @default(now())
}

model Offer {
  id         Int            @id @default(autoincrement())
  thread     MessageThread  @relation(fields: [threadId], references: [id])
  threadId   Int
  sender     User           @relation(fields: [senderId], references: [id])
  senderId   Int
  price      Float
  status     OfferStatus
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  Listing Listing[]
}

enum OfferStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
}

////////////////////////
// Favorites & Activity
////////////////////////

model FavoritesLike {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  createdAt DateTime @default(now())
}

model FavoritesSavedSearch {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  name      String?
  query     String
  createdAt DateTime @default(now())
}

model RecentlyViewed {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  listing   Listing  @relation(fields: [listingId], references: [id])
  listingId Int
  viewedAt  DateTime @default(now())
}

////////////////////////
// Notifications & Alerts
////////////////////////

model Notification {
  id         Int              @id @default(autoincrement())
  user       User             @relation(fields: [userId], references: [id])
  userId     Int
  type       NotificationType
  title      String
  content    String?
  isRead     Boolean          @default(false)
  createdAt  DateTime         @default(now())

  PushNotificationLog PushNotificationLog[]
}

enum NotificationType {
  ORDER_UPDATE
  PROMOTION
  MESSAGE
  SYSTEM
}

model PushNotificationLog {
  id               Int           @id @default(autoincrement())
  notification     Notification  @relation(fields: [notificationId], references: [id])
  notificationId   Int
  providerResponse String?
  sentAt           DateTime      @default(now())
}

////////////////////////
// Reviews & Ratings
////////////////////////

model ProductReview {
  id           Int      @id @default(autoincrement())
  product      Product  @relation(fields: [productId], references: [id])
  productId    Int
  orderItem    OrderItem @relation(fields: [orderItemId], references: [id])
  orderItemId  Int
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  rating       Int
  content      String?
  createdAt    DateTime @default(now())
}

model SellerRating {
  seller     User      @relation(fields: [sellerId], references: [id])
  sellerId   Int       @id
  average    Float     @default(0)
  count      Int       @default(0)
  updatedAt  DateTime  @updatedAt
}

////////////////////////
// Transactions & Settlements
////////////////////////

model Transaction {
  id         Int              @id @default(autoincrement())
  user       User             @relation(fields: [userId], references: [id])
  userId     Int
  order      Order?           @relation(fields: [orderId], references: [id])
  orderId    Int?
  type       TransactionType
  amount     Float
  fee        Float?
  status     String
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
}

enum TransactionType {
  CAPTURE
  REFUND
}

model WithdrawalRequest {
  id              Int              @id @default(autoincrement())
  seller          User             @relation(fields: [sellerId], references: [id])
  sellerId        Int
  bankAccount     UserBankAccount  @relation(fields: [bankAccountId], references: [id])
  bankAccountId   Int
  amount          Float
  status          WithdrawalStatus
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

enum WithdrawalStatus {
  PENDING
  COMPLETED
  REJECTED
}

model AccountBalance {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  balance   Float    @default(0)
  updatedAt DateTime @updatedAt
}

////////////////////////
//   Admin & CMS
////////////////////////

model AdminUser {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int      @unique
  privileges String?
  createdAt  DateTime @default(now())
}

model CMSPage {
  id         Int       @id @default(autoincrement())
  slug       String    @unique
  title      String
  content    String
  pageType   PageType
  isActive   Boolean   @default(true)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

enum PageType {
  GUEST
  AUTHENTICATED
  ADMIN
}

model Report {
  id        Int      @id @default(autoincrement())
  name      String
  type      String?
  params    Json?
  createdAt DateTime @default(now())
}